{"version":3,"sources":["components/Pixel.js","components/Row.js","components/DrawingPanel.js","components/Explore.js","components/Editor.js","components/App.js","index.js"],"names":["Pixel","props","selectedColor","id","getColor","useState","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","className","onClick","onMouseEnter","onMouseLeave","style","backgroundColor","Row","getRow","rowNum","color","pixels","i","push","DrawingPanel","starterRow","Array","apply","map","String","prototype","valueOf","starterCanvas","fill","pixelColors","setPixelColors","canvasId","setCanvasId","row","col","temp_state","paintCanvas","panelRef","useRef","rows","width","ref","type","defaultValue","onChange","e","target","valueAsNumber","value","colors","colorsRGB","length","j","parseInt","substr","Explore","epAddress","epABI","svg","setSvg","notDisplayed","setNotDisplayed","getPainting","a","window","ethereum","provider","ethers","providers","Web3Provider","contract","Contract","tokenURI","data","console","log","canvas","rowCount","tc","tokenCounter","uri","img","imgA","split","svgA","href","height","src","retPainting","Editor","hideOptions","setHideOptions","hideDrawingPanel","setHideDrawingPanel","hideExplore","hideAbout","setHideAbout","hidePreserve","setHidePreserve","buttonText","setButtonText","setColor","ethAccount","setAccount","mainnetContractAddress","requestAccount","web3","isConnected","request","method","accounts","signer","getSigner","create","gasLimit","transaction","wait","tokenId","paint","preserve","utils","parseEther","onChangeComplete","hex","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32751ac5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../styles/pixel.scss\";\n\nexport default function Pixel(props) {\n    const { selectedColor, id, getColor } = props;\n\n    const [pixelColor, setPixelColor] = useState(\"#fff\");\n    const [oldColor, setOldColor] = useState(pixelColor);\n    const [canChangeColor, setCanChangeColor] = useState(true);\n\n    function applyColor() {\n        setPixelColor(selectedColor);\n        setCanChangeColor(false);\n        getColor(selectedColor, id);\n    }\n\n    function changeColorOnHover() {\n        setOldColor(pixelColor);\n        setPixelColor(selectedColor);\n    }\n\n    function resetColor() {\n        if (canChangeColor) {\n            setPixelColor(oldColor);\n        }\n\n        setCanChangeColor(true);\n    }\n\n    return <div className=\"pixel\" onClick={applyColor} onMouseEnter={changeColorOnHover} onMouseLeave={resetColor} style={{backgroundColor: pixelColor}}></div>\n \n}","import React, { useState } from \"react\";\nimport \"../styles/row.scss\";\nimport Pixel from \"./Pixel\";\n\nexport default function Row(props) {\n    const {selectedColor, getRow, rowNum} = props;\n    function getColor(color, id) {\n        getRow(rowNum, id, color);\n    }\n\n    let pixels = [];\n    \n    \n    for (let i = 0; i < 4; i++) {\n        pixels.push(<Pixel key={i} id={i} selectedColor={selectedColor} getColor={getColor}/>)\n    }\n\n    return <div className=\"row\">{pixels}</div>\n}","import React, { useRef, useState } from \"react\"\nimport \"../styles/editor.scss\";\nimport Row from \"./Row\";\n\nexport default function DrawingPanel(props) {\n    const starterRow = Array.apply(null, Array(4)).map(String.prototype.valueOf, \"#ffffff\");\n    const starterCanvas = new Array(4).fill(starterRow);\n    const [pixelColors, setPixelColors] = useState(starterCanvas);\n    const [canvasId, setCanvasId] = useState(0);\n\n    function getRow(row, col, color) {\n        let temp_state = [...pixelColors]\n        temp_state[row] = [...temp_state[row]]\n        temp_state[row][col] = color;\n        setPixelColors(temp_state);\n    }\n    const {selectedColor, paintCanvas} = props;\n\n    const panelRef = useRef();\n\n    let rows = [];\n\n    for (let i = 0; i < 4; i++) {\n        rows.push(<Row key={i} rowNum={i} width={4} selectedColor={selectedColor} getRow={getRow}/>)\n    }\n\n    function exportSvg() {\n        let colors = []\n        let colorsRGB = []\n        for (let i = 0; i < pixelColors.length; i++) {\n                for (let j = 0; j < pixelColors[i].length; j++) {\n                    colors.push(pixelColors[i][j])\n                    colorsRGB.push(`rgb(${parseInt(pixelColors[i][j].substr(1,2), 16)},${parseInt(pixelColors[i][j].substr(3,2), 16)},${parseInt(pixelColors[i][j].substr(5,2), 16)})`)\n                }\n        }\n        paintCanvas(canvasId, colorsRGB)\n\n    }\n\n    function handleId(event) {\n        setCanvasId(event.target.valueAsNumber)\n    }\n\n    return (\n        <div id=\"drawingPanel\">\n            <div id=\"pixels\" ref={panelRef}>\n                {rows}\n            </div>\n            <div>\n                <form>\n                    <label>\n                        canvas id:   \n                        <input type=\"number\" defaultValue={canvasId} onChange={(e)=>handleId(e)}></input>\n                    </label>\n                    <input type=\"button\" value=\"submit\" onClick={exportSvg}/>\n                </form>\n            </div>\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport \"../styles/explore.scss\";\nimport \"../styles/row.scss\";\nimport \"../styles/drawingPanel.scss\";\nimport \"../styles/pixel.scss\"\n\nexport default function Explore(props) {\n    const {epAddress, epABI} = props;\n    const [svg, setSvg] = useState([])\n    const [notDisplayed, setNotDisplayed] = useState(true)\n    \n    async function getPainting(id) {\n        if (typeof window.ethereum !== 'undefined') {\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const contract = new ethers.Contract(epAddress, epABI, provider)\n            try {\n              const data = await contract.tokenURI(id)\n              return data\n            } catch (err) {\n              console.log(\"Error: \", err)\n            }\n        } \n    }\n\n    async function retPainting(){\n      let canvas = []\n      let row = []\n      let rowCount = 0\n      let tc = 0\n      if (typeof window.ethereum !== 'undefined') {\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        const contract = new ethers.Contract(epAddress, epABI, provider)\n        try {\n          tc = await contract.tokenCounter()\n        } catch (err) {\n          console.log(\"Error: \", err)\n        }\n    } \n      for (let i=0; i<506; i++) {\n        let uri = `data:image/svg+xml;utf8,<svg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20512%20512'%20width='512'%20height='512'><rect%20x='0'%20y='0'%20width='100%'%20height='100%'%20fill='rgb(128,128,128)'/></svg>` \n        let img\n        if (i < tc) {\n          img = await getPainting(i)\n        }\n        if (img) {\n          let imgA = img.split(`\"image\":\"`,2)\n          let svgA = imgA[1].split('\"',2)\n          uri = svgA[0]\n          row.push(<div className=\"tooltip\"><a href={`https://opensea.io/assets/0x811e245b74fa05a6514723ead75157f2f26a2cb5/${i}`}><img width=\"25rem\" height=\"25rem\" src={uri}/></a><span className=\"tooltiptext\">canvas {i}</span></div>)\n        } else {\n          row.push(<div><a href=\"#\"><img width=\"25rem\" height=\"25rem\" src={uri}/></a></div>)\n        }\n        \n        rowCount ++\n        if (rowCount === 22) {\n          canvas.push(<div key={i} className=\"row\">{row}</div>)\n          row = []\n          rowCount = 0\n        }\n      }\n      setSvg(canvas)\n    }\n\n    if(notDisplayed) {\n      retPainting()\n      setNotDisplayed(!notDisplayed)\n    }\n    return <div id=\"pixels\">{svg}</div>\n}","import React, {useState} from \"react\";\nimport \"../styles/editor.scss\";\nimport { PhotoshopPicker} from \"react-color\";\nimport DrawingPanel from \"./DrawingPanel\";\nimport Explore from \"./Explore\";\nimport { ethers } from \"ethers\";\n\nexport default function Editor() {\n    const [hideOptions, setHideOptions] = useState(false);\n    const [hideDrawingPanel, setHideDrawingPanel] = useState(true);\n    const [hideExplore, setHideExplore] = useState(true);\n    const [hideAbout, setHideAbout] = useState(false);\n    const [hidePreserve, setHidePreserve] = useState(false);\n    const [buttonText, setButtonText] = useState(\"paint\");\n    const [selectedColor, setColor] = useState(\"#f44336\");\n    const [ethAccount, setAccount] = useState(\"\");\n    const [canvasId, setCanvasId] = useState(0);\n\n    const rinkebyContractAddress = \"0x8c96Ea3019Cb34ac08543aaFc3cAe29C497E5ee2\"\n    const mainnetContractAddress = \"0x811E245B74Fa05A6514723EAd75157f2F26a2cB5\"\n    const epABI = [\n        \"event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)\",\n        \"event ApprovalForAll(address indexed owner, address indexed operator, bool approved)\",\n        \"event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)\",\n        \"event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)\",\n        \"function addressToString(address _addr) pure returns (string)\",\n        \"function approve(address to, uint256 tokenId)\",\n        \"function balanceOf(address owner) view returns (uint256)\",\n        \"function buildImgURI(bytes svg) pure returns (bytes)\",\n        \"function buildTokenURI(bytes imageURI, uint256 tokenId, bool newCanvas) view returns (string)\",\n        \"function create()\",\n        \"function fee() view returns (uint256)\",\n        \"function getApproved(uint256 tokenId) view returns (address)\",\n        \"function isApprovedForAll(address owner, address operator) view returns (bool)\",\n        \"function isFrozen(uint256) view returns (bool)\",\n        \"function iterations(uint256) view returns (uint256)\",\n        \"function name() view returns (string)\",\n        \"function owner() view returns (address)\",\n        \"function ownerOf(uint256 tokenId) view returns (address)\",\n        \"function paint(uint256 tokenId, string[] colors)\",\n        \"function preserve(uint256 tokenId) payable\",\n        \"function renounceOwnership()\",\n        \"function safeTransferFrom(address from, address to, uint256 tokenId)\",\n        \"function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)\",\n        \"function setApprovalForAll(address operator, bool approved)\",\n        \"function setFreezeFee(uint256 newFee)\",\n        \"function sizeStrings(uint256) view returns (string)\",\n        \"function supportsInterface(bytes4 interfaceId) view returns (bool)\",\n        \"function symbol() view returns (string)\",\n        \"function tokenCounter() view returns (uint256)\",\n        \"function tokenIdString(uint256) view returns (string)\",\n        \"function tokenURI(uint256 tokenId) view returns (string)\",\n        \"function transferFrom(address from, address to, uint256 tokenId)\",\n        \"function transferOwnership(address newOwner)\",\n        \"function withdraw()\"\n      ]\n    \n\n    async function requestAccount() {\n        console.log(\"req acc\")\n        let web3 = window.ethereum\n        console.log(web3.isConnected())\n        const accounts = await web3.request({ method: 'eth_requestAccounts' });\n        console.log(accounts)\n        setAccount(accounts[0])\n    }\n\n    async function mintCanvas() {\n        if (typeof window.ethereum !== 'undefined') {\n        await requestAccount()\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(mainnetContractAddress, epABI, signer)\n        const transaction = await contract.create({gasLimit:450000})\n        await transaction.wait()\n        }\n    }\n\n    async function paintCanvas(tokenId, colors) {\n        if (typeof window.ethereum !== 'undefined') {\n            await requestAccount()\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner()\n            const contract = new ethers.Contract(mainnetContractAddress, epABI, signer)\n            const transaction = await contract.paint(tokenId, colors, {gasLimit:1400000})\n            await transaction.wait()\n        }\n    }\n\n    async function preserveCanvas() {\n        if (typeof window.ethereum !== 'undefined') {\n            await requestAccount()\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner()\n            const contract = new ethers.Contract(mainnetContractAddress, epABI, signer)\n            const transaction = await contract.preserve(canvasId, {value:ethers.utils.parseEther(\".2\"), gasLimit:55000})\n            await transaction.wait()\n        }\n    }\n    \n    function handleId(event) {\n        setCanvasId(event.target.valueAsNumber)\n    }\n    \n    function initializeDrawingPanel() {\n        setHideOptions(!hideOptions);\n        setHideDrawingPanel(!hideDrawingPanel);\n\n        buttonText === \"paint\" \n            ? setButtonText(\"reset\") \n            : setButtonText(\"paint\");\n    }\n    \n    function initializeAbout() {\n        setHideAbout(!hideAbout)\n    }\n\n    function initializePreserve() {\n        setHidePreserve(!hidePreserve)\n    }\n\n    function changeColor(color) {\n        setColor(color.hex);\n    }\n\n    return <div id=\"editor\">\n        <header><ul id=\"nav\"><li><a href=\"#\">Ethereum Paint</a></li><li><a href=\"#\" onClick={requestAccount}>{ethAccount ? ethAccount : \"Connect Wallet\"}</a></li></ul></header>\n        <div className=\"buttonGroup\">\n            <button onClick={mintCanvas}>\n                mint a canvas\n            </button>\n            <button onClick={initializeDrawingPanel}>\n                {buttonText}\n            </button>\n            <button onClick={initializePreserve}>\n                preserve painting\n            </button>\n            <button onClick={initializeAbout}>\n                about\n            </button>\n        </div>\n        <div>\n            {hideAbout && (\n                <ul className=\"about\">\n                    <li><a href=\"https://etherscan.io/address/0x811e245b74fa05a6514723ead75157f2f26a2cb5\">etherscan</a></li>\n                    <li><a href=\"https://opensea.io/collection/ethereum-paint-4x4\">opensea</a></li>\n                    <li><a href=\"https://discord.gg/AXbjY5qvWZ\">discord</a></li>\n                </ul>\n            )}\n        </div>\n        <div>\n            {hidePreserve && (\n                <form>\n                    <label>\n                        canvas id:   \n                        <input type=\"number\" defaultValue={canvasId} onChange={(e)=>handleId(e)}></input>\n                    </label>\n                    <input type=\"button\" value=\"submit\" onClick={preserveCanvas}/>\n                </form>\n            )}\n        </div>\n        <div id=\"canvas\">\n            {hideOptions && (\n                <DrawingPanel selectedColor={selectedColor} paintCanvas={paintCanvas}/>\n            )}\n            {hideOptions && (\n                <PhotoshopPicker color={selectedColor} className=\"colorPicker\" onChangeComplete={changeColor}/>\n            )}\n        </div>\n        {hideExplore && (<Explore epABI={epABI} epAddress={mainnetContractAddress}/>)}\n    </div>\n}","import \"../styles/App.scss\";\nimport Editor from \"./Editor\";\n\nfunction App() {\n    return <div className=\"App\">\n        <Editor />\n    </div>\n}\n\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}